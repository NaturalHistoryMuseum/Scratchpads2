<?php
define('SCRATCHPADS_ORGANIZATION', '315b3c03-4a0a-424e-83a5-d25aa748e666');
define('SCRATCHPADS_NHM_INSTALLATION', '69818b49-38c9-41ad-b504-e5cd53dff238');

/**
 * Implements hook_menu().
 */
function scratchpads_gbif_registry_client_menu()
{
  return array(
    'admin/config/content/scratchpads_gbif_registry_client' => array(
      'title' => 'GBIF registration settings',
      'description' => 'Configure the GBIF registration client',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'scratchpads_gbif_registry_client_admin_settings'
      ),
      'access arguments' => array(
        'configure scratchpads gbif registry client'
      ),
      'file' => 'scratchpads_gbif_registry_client.pages.inc'
    ),
    'admin/config/content/scratchpads_gbif_registry_client/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
      'access arguments' => array(
        'configure scratchpads gbif registry client'
      ),
    )
  );
}

/**
 * Implements hook_cron().
 */
function scratchpads_gbif_registry_client_cron()
{
  // Go no further if GBIF registration is disabled,
  // or we're not the right profile
  // or we updated less than a week ago.
  if (variable_get('scratchpads_gbif_registry_client_registration_enabled', false) &&
    in_array(variable_get('install_profile', ''), scratchpads_gbif_registry_client_profiles()) && variable_get('scratchpads_gbif_registry_client_last_update', 0) + 604800 < time()) {
    // Once a week we update the information that GBIF holds about us.
    $registry = GBIFRegistry::singleton();
    if (($uuid = variable_get('scratchpads_gbif_registry_client_uuid', false)) != false) {
      $dataset = new GBIF\Dataset($uuid);
    } else {
      // We need to create a new Dataset for the Scratchpad
      // organization.
      $homepage = url('', array(
        'absolute' => true
      ));
      $site_name = variable_get('site_name', false);
      $dataset = new GBIF\Dataset(array(
        'installationKey' => variable_get('scratchpads_gbif_registry_client_scratchpads_nhm_installation', SCRATCHPADS_NHM_INSTALLATION),
        'publishingOrganizationKey' => variable_get('scratchpads_gbif_registry_client_scratchpads_organization', SCRATCHPADS_ORGANIZATION),
        'external' => false,
        'numConstituents' => 0,
        'type' => 'CHECKLIST',
        'title' => 'Checklist ' . (module_exists('darwincore') ? 'and specimen ' : '') . 'records from the Scratchpad "' . ($site_name ? $site_name : $homepage) . '"',
        'description' => variable_get('scratchpads_gbif_registry_client_description', ''),
        'language' => 'eng',
        'homepage' => $homepage,
        'citation' => array(
          'text' => ($site_name ? $site_name : 'Scratchpad: "' . $homepage . '"')
        ),
        'lockedForAutoUpdate' => false,
        'tags' => array()
      ));
      $dataset->save();
      variable_set('scratchpads_gbif_registry_client_uuid', $dataset->getKey());
      // Add a technical contact, which is the scratchpads team.
      $dataset->addContact(array(
        'type' => 'TECHNICAL_POINT_OF_CONTACT',
        'primary' => false,
        'firstName' => 'Scratchpads',
        'lastName' => 'Team',
        'email' => array(
          'scratchpads@nhm.ac.uk'
        ),
        'phone' => array(
          '+44 20 7942 6279',
          '+44 20 7942 5127'
        ),
        'homepage' => array(
          'http://scratchpads.org/'
        ),
        'position' => array(
          'Development Team',
          'Support Team'
        ),
        'address' => array(
          'The Natural History Museum, Cromwell Road, London, SW7 5BD, UK'
        )
      ));
    }
    $query = db_select('users', 'u')->fields('u', array(
      'uid'
    ));
    // And add all maintainers as "contacts"
    $query->innerJoin('users_roles', 'ur', 'u.uid = ur.uid');
    $query->innerJoin('role', 'r', 'ur.rid = r.rid');
    $query->condition('r.name', 'maintainer');
    $uids = $query->execute()->fetchCol();
    $users = user_load_multiple($uids);
    foreach ($dataset->getContacts() as $contact) {
      $contact = $contact->getAsArray();
      foreach ($users as $key => $user) {
        if ($contact['email'][0] == $user->mail) {
          unset($users[$key]);
          break;
        }
      }
    }
    foreach ($users as $user) {
      $dataset->addContact(array(
        'type' => 'POINT_OF_CONTACT',
        'primary' => false,
        'firstName' => isset($user->field_user_given_names[LANGUAGE_NONE][0]['value']) ? $user->field_user_given_names[LANGUAGE_NONE][0]['value'] : '',
        'lastName' => isset($user->field_user_family_name[LANGUAGE_NONE][0]['value']) ? $user->field_user_family_name[LANGUAGE_NONE][0]['value'] : '',
        'email' => array(
          $user->mail
        ),
        'position' => array(
          'Scratchpads Maintainer'
        )
      ));
    }
    // Get a list of endpoints that we need to register for this installation.
    $endpoints = module_invoke_all('gbif_registry_endpoints');
    foreach ($dataset->getEndpoints() as $endpoint) {
      unset($endpoints[$endpoint->getURL()]);
    }
    foreach ($endpoints as $endpoint) {
      $dataset->addEndpoint($endpoint);
    }

    // Also rebuild the archive
    if(module_exists('dwcarchiver')) {
      module_load_include('rebuild.inc', 'dwcarchiver');
      dwcarchiver_rebuild('gbif-dwca', false);
      menu_rebuild();
    }

    if (variable_get('scratchpads_gbif_registry_client_uuid', false)) {
      variable_set('scratchpads_gbif_registry_client_last_update', time());
    }
  }
}

/**
 * Implements hook_dwcarchiver_rebuild
 *
 * Ask GBIF to recrawl the dataset when it gets rebuilt
 */
function scratchpads_gbif_registry_client_dwcarchiver_rebuild($did) {
  if($did != 'gbif-dwca') {
    return;
  }

  $uuid = variable_get('scratchpads_gbif_registry_client_uuid', false);

  if (!$uuid) {
    return;
  }

  GBIFRegistry::singleton();
  $dataset = new GBIF\Dataset($uuid);

  $dataset->requestCrawl();
}

/**
 * Implements hook_permission()
 */
function scratchpads_gbif_registry_client_permission()
{
  return array(
    'configure scratchpads gbif registry client' => array(
      'title' => t('Configure scratchpads gbif registry client')
    ),
  );
}

/**
 * Implements hook_scratchpads_default_permissions().
 */
function scratchpads_gbif_registry_client_scratchpads_default_permissions()
{
  return array(
    'maintainer' => array(
      'configure scratchpads gbif registry client'
    )
  );
}

/**
 * Helper function to return an array of profiles that should report back to
 * GBIF.
 */
function scratchpads_gbif_registry_client_profiles()
{
  return array(
    'scratchpad_2',
    'emonocot_2',
    'scratchpad_2_migrate',
    'emonocot_2_migrate'
  );
}
