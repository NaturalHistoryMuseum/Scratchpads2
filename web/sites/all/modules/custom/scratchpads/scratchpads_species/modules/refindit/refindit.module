<?php

/**
 * Implements hook_block_info().
 */
function refindit_block_info(){
  return array(
    'default' => array(
      'info' => t('ReFindit Species Page Block'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
      'pages' => 'taxonomy/term/*/literature',
      'visibility' => BLOCK_VISIBILITY_LISTED,
      'status' => 1,
      'region' => 'content',
      'weight' => 100
    )
  );
}

/**
 * Implements hook_flush_caches()
 */
function refindit_flush_caches(){
  if(function_exists('varnish_purge')){
    varnish_purge(_varnish_get_host(), 'ajaxblocks');
  }
  return array(
    'cache_refindit'
  );
}

/**
 * Fetches JSON from the given URL with the given options. Uses the drupal_http_request function to
 * get the data from the URL. If there are any problems with the request (!200, json error etc) then
 * this will return false, otherwise returns an object.
 *
 * @param string $url the url to request
 * @param array $options options for the request, default is just timeout: 60.
 * @return bool|array false if there was a problem with getting the data from the URL, or the
 *                    decoded JSON objects in an array if everything was fine
 */
function _refindit_fetch_json($url, $options = array('timeout' => 60)) {
  try {
    $response = drupal_http_request($url, $options);
    if ($response->code == 200) {
      // the return from refindit is bizarre: [...][...] rather than [[...], [...]], so we have to
      // do some work before decoding it
      return json_decode(str_replace('][', ',', $response->data));
    }
  } catch (Exception $e) {
    // swallow and fall through to the return false below
  }
  return false;
}

/**
 * Implements hook_block_view().
 */
function refindit_block_view($delta = ''){
  // We load the term from the menu
  $term = menu_get_object('taxonomy_term', 2);
  $content = array(
    'subject' => t('ReFindIt'),
    'content' => array()
  );

  // default the markup we return to an error message
  $markup = '<p>' . t('Unable to fetch references from @name.', array('@name' => 'ReFindIt')) . '</p>';

  if($term){
    if(!function_exists('ajaxblocks_in_ajax_handler') || (function_exists('ajaxblocks_in_ajax_handler') && ajaxblocks_in_ajax_handler())){
      $cache = cache_get($term->tid, 'cache_refindit');
      if ($cache->data) {
        // use the markup in the cache
        $markup = $cache->data;
      } else {
        $items = array();
        $results = _refindit_fetch_json('https://refinder.org/find?search=simple&text=' . urlencode($term->name));

        // if we get back an array (even if it's empty)
        if (is_array($results)) {
          for($i = 0; $i < 20; $i++){
            if(empty($results[$i])){
              break;
            }
            $href = (isset($results[$i]->href)) ? $results[$i]->href : $results[$i]->infoUrl;
            $text = (isset($results[$i]->fullCitation)) ? $results[$i]->fullCitation : $results[$i]->title;

            // sometimes, the refinder api returns to us a title which is actually an object. If
            // this happens we need to handle it without erroring. An example (at time of writing)
            // is the doi 10.3389/fphys.2019.00434 which on PubMed gives us back an object as the
            // title
            if (is_object($text)) {
              // if it is an object, often there is a "_" key which contains the title
              if (isset($text->_)) {
                $text = $text->_;
              } else {
                // otherwise, we just have this catch all to json encode it and avoid erroring out
                $text = json_encode($text);
              }
            }
            $items[] = array(
              'data' => '<a target="_blank" href="' . $href . '">' . $text . '</a>',
              'style' => 'list-style:disc;padding-bottom:3px;'
            );
          }
          if (count($items)) {
            $block_content = array(
              'list' => array(
                '#theme' => 'item_list',
                '#items' => $items
              ),
              'link_to_gscholar' => array(
                '#markup' => '<p><strong>' . l(t('View results on ReFindIt'), 'http://refindit.org/?search=simple&text=' . urlencode($term->name), array(
                  'attributes' => array(
                    'target' => '_blank'
                  )
                )) . '</strong></p>'
              )
            );
            // set the markup using the block we've built with the items
            $markup = drupal_render($block_content);
            cache_set($term->tid, $markup, 'cache_refindit');
          } else {
            // no items were resolved, give the user that information
            $markup = '<p>' . t('No references found from @name.', array('@name' => 'ReFindIt')) . '</p>';
          }
        }
      }
    }
  }

  $content['content']['#markup'] = $markup;
  return $content;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function refindit_form_block_admin_configure_alter(&$form, &$form_state, $form_id){
  if($form['module']['#value'] == 'refindit'){
    // Prevent editing of this block.
    if(!user_access('scratchpad team')){
      drupal_set_message(t('You may not edit the Google Scholar block'));
      drupal_goto();
    }
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function refindit_contextual_links_view_alter(&$element, $items){
  if(@isset($element['#contextual_links']['block'][1][0]) && $element['#contextual_links']['block'][1][0] == 'refindit' && !user_access('scratchpad team')){
    $element = array();
  }
}